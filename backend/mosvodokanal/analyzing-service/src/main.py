import asyncio
import signal
from config.settings import settings
from kafka.consumer import ITPDataKafkaConsumer
from kafka.producer import ITPDataKafkaProducer
from client.vodokanal_client import VodokanalDataServiceClient
from batch.accumulator import BatchAccumulator
from prediction.prediction_pipeline import PredictionPipeline
from processing.batch_processor import BatchProcessor
from utils.model_loader import download_models
from utils.logger import get_logger

logger = get_logger(__name__)

class ITPDataAnalyzingService:
    def __init__(self):
        self.consumer = ITPDataKafkaConsumer(settings)
        self.producer = ITPDataKafkaProducer(settings)
        self.rest_client = VodokanalDataServiceClient(settings)
        self.accumulator = BatchAccumulator(
            settings.batch.size, 
            settings.batch.timeout_seconds
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        self.prediction_pipeline = PredictionPipeline()
        
        self.batch_processor = BatchProcessor(
            self.rest_client,
            self.prediction_pipeline,
            self.producer
        )
        
        self.running = True
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("üöÄ Starting ITP Data Analyzing Service...")
        
        try:
            # 1. –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª–∏
            model_paths = await download_models()
            
            # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –≤ –ø–∞–π–ø–ª–∞–π–Ω
            if model_paths:
                self.prediction_pipeline.load_sarimax_models(model_paths)
                models_info = self.prediction_pipeline.get_loaded_models_info()
                logger.info(f"üìä Loaded models: {list(models_info.keys())}")
            else:
                logger.warning("‚ö†Ô∏è No models loaded, predictions will be skipped")
            
            # 3. –ó–∞–ø—É—Å–∫–∞–µ–º Kafka –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            await self.consumer.start()
            await self.producer.start()
            await self.rest_client.start()
            
            logger.info("‚úÖ All components started successfully")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            tasks = [
                asyncio.create_task(self.consume_messages()),
                asyncio.create_task(self.check_timeouts())
            ]
            
            await asyncio.gather(*tasks)
            
        except Exception as e:
            logger.error(f"Service startup error: {e}")
            raise
        finally:
            await self.stop()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("üõë Stopping ITP Data Analyzing Service...")
        self.running = False
        
        await self.consumer.stop()
        await self.producer.stop() 
        await self.rest_client.stop()
        
        logger.info("‚úÖ Service stopped")
    
    async def consume_messages(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        async for itp_id, message in self.consumer.consume_messages():
            if not self.running:
                break
                
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞—Ç—á
            batch_ready = await self.accumulator.add_message(itp_id, message)
            
            if batch_ready:
                batch = self.accumulator.get_batch(itp_id)
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
                asyncio.create_task(self.batch_processor.process_batch(itp_id, batch))
    
    async def check_timeouts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –±–∞—Ç—á–µ–π"""
        while self.running:
            async for itp_id, batch in self.accumulator.check_timeouts():
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
                asyncio.create_task(self.batch_processor.process_batch(itp_id, batch))
            
            await asyncio.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    service = ITPDataAnalyzingService()
    
    # Graceful shutdown
    def signal_handler():
        logger.info("Received shutdown signal")
        asyncio.create_task(service.stop())
    
    for sig in (signal.SIGTERM, signal.SIGINT):
        asyncio.get_event_loop().add_signal_handler(sig, signal_handler)
    
    try:
        await service.start()
    except KeyboardInterrupt:
        logger.info("Service interrupted by user")
    except Exception as e:
        logger.error(f"Service error: {e}")

if __name__ == "__main__":
    asyncio.run(main())